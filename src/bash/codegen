#!/bin/bash

symTableLookup() {
  reslOffset=$(grep "^$1" "$symTbl")
}

get-label() {
  gotLabel="label$labelCnt"
  labelCnt=$((labelCnt+1))
}

output() {
  echo "$@" >> $target
}

load-const() {
  output "lis \$$1"
  output ".word $2"
}

push() {
  output "sw \$$1, 0(\$30)"
  output 'sub $30, $30, $14'
}

pop() {
  output 'add $30, $30, $14'
  output "lw \$$1, 0(\$30)"
}

genCode() {
  cd $1
  read rule < node
  case $rule in
  "start BOF procedures EOF")
    output '.import print'
    output '.import new'
    output '.import delete'
    output '.import init'
    output 'lis $25'
    output '.word print'
    output 'lis $26'
    output '.word new'
    output 'lis $27'
    output '.word delete'
    load-const 11 1
    load-const 14 4
    output 'sub $30, $30, $14'
    push 31
    waint=$(grep "^PROCwain" $procTbl)
    if [ "$waint" = "PROCwain int int" ]; then
      output 'add $4, $2, $0'
      output 'add $2, $0, $0'
    fi
    output 'lis $31'
    output '.word init'
    output 'jalr $31'
    if [ "$waint" = "PROCwain int int" ]; then
      output 'add $2, $4, $0'
    fi
    output 'lis $31'
    output '.word PROCwain'
    push 1
    push 2
    output 'jalr $31'
    pop 2
    pop 1
    pop 31
    output 'jr $31'
    genCode 1
    ;;
  "procedures procedure procedures")
    genCode 0
    genCode 1
    ;;
  "procedures main")
    genCode 0
    ;;
  "procedure INT ID LPAREN params RPAREN LBRACE dcls statements RETURN expr SEMI RBRACE")
    symTbl="$PWD/.symbolTable"
    if [ -e "$symTbl" ]; then
      rm "$symTbl"
    fi
    touch "$symTbl"
    read -a array < 1/node
    name="PROC${array[1]}"
    proc=$(grep "^$name" $procTbl)
    currDepth=$(wc -w <<< $proc)
    currDepth=$((currDepth+1))
    currDepth=$((4*currDepth)) # currDepth = args *4 + 8

    output "$name:"
    push 31
    push 29
    output 'add $29, $30, $0'
    push 5
    push 6
    genCode 3
    currDepth=-8
    genCode 6
    genCode 7
    genCode 9
    output 'add $30, $29, $0'
    output 'lw $5, 0($30)'
    output 'lw $6, -4($30)'
    pop 29
    pop 31
    output 'jr $31'
    ;;
  "main INT WAIN LPAREN dcl COMMA dcl RPAREN LBRACE dcls statements RETURN expr SEMI RBRACE")
    symTbl="$PWD/.symbolTable"
    if [ -e "$symTbl" ]; then
      rm "$symTbl"
    fi
    touch "$symTbl"
    currDepth=16

    output 'PROCwain:'
    push 31
    push 29
    output 'add $29, $30, $0'
    push 5
    push 6
    genCode 3
    genCode 5
    currDepth=-8
    genCode 8
    genCode 9
    genCode 11
    output 'add $30, $29, $0'
    output 'lw $5, 0($30)'
    output 'lw $6, -4($30)'
    pop 29
    pop 31
    output 'jr $31'
    ;;
  "params")
    ;;
  "params paramlist")
    genCode 0
    ;;
  "paramlist dcl")
    genCode 0
    ;;
  "paramlist dcl COMMA paramlist")
    genCode 0
    genCode 2
    ;;
  "type INT")
    #unused
    ;;
  "type INT STAR")
    #unused
    ;;
  "dcls")
    ;;
  "dcls dcls dcl BECOMES NUM SEMI")
    genCode 0
    genCode 1
    read -a array < 3/node
    num=${array[1]}
    load-const 3 "$num"
    push 3
    ;;
  "dcls dcls dcl BECOMES NULL SEMI")
    genCode 0
    genCode 1
    push 11
    ;;
  "dcl type ID")
    read -a array < 1/node
    name="${array[1]}"
    echo "$name $currDepth" >> "$symTbl"
    currDepth=$((currDepth-4))
    ;;
  "statements")
    ;;
  "statements statements statement")
    genCode 0
    genCode 1
    ;;
  "statement lvalue BECOMES expr SEMI")
    genCode 0
    push 3
    genCode 2
    pop 5
    output 'sw $3, 0($5)'
    ;;
  "statement IF LPAREN test RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE")
    genCode 2
    get-label
    echo "$gotLabel" > .else
    output "beq \$3, \$0, $gotLabel"
    get-label
    echo "$gotLabel" > .end
    genCode 5
    gotLabel=$(cat .end)
    output "beq \$0, \$0, $gotLabel"
    gotLabel=$(cat .else)
    output "${gotLabel}:"
    genCode 9
    gotLabel=$(cat .end)
    output "${gotLabel}:"
    rm .else
    rm .end
    ;;
  "statement WHILE LPAREN test RPAREN LBRACE statements RBRACE")
    get-label
    echo "$gotLabel" > .startlb
    output "${startlb}:"
    genCode 2
    get-label
    echo "$gotLabel" > .endlb
    output "beq \$3, \$0, $gotLabel"
    genCode 5
    gotLabel=$(cat .startlb)
    output "beq \$0, \$0, $gotLabel"
    gotLabel=$(cat .endlb)
    output "${gotLabel}:"
    rm .startlb
    rm .endlb
    ;;
  "statement PRINTLN LPAREN expr RPAREN SEMI")
    genCode 2
    output 'add $1, $3, $0'
    output 'jalr $25'
    ;;
  "statement DELETE LBRACK RBRACK expr SEMI")
    genCode 3
    output 'beq $3, $11, 2'
    output 'add $1, $3, $0'
    output 'jalr $27'
    ;;
  "test expr EQ expr")
    genCode 0
    push 3
    genCode 2
    pop 5
    output 'add $6, $0, $0'
    output 'bne $3, $5, 1'
    output 'add $6, $11, $0'
    output 'add $3, $6, 0'
    ;;
  "test expr NE expr")
    genCode 0
    push 3
    genCode 2
    pop 5
    output 'add $6, $0, $0'
    output 'beq $3, $5, 1'
    output 'add $6, $11, $0'
    output 'add $3, $6, $0'
    ;;
  "test expr LE expr")
    genCode 0
    push 3
    genCode 2
    pop 5
    output 'slt $3, $5, $3'
    output 'sub $3, $11, $3'
    ;;
  "test expr LT expr")
    genCode 0
    push 3
    genCode 2
    pop 5
    output 'slt $3, $5, $3'
    ;;
  "test expr GE expr")
    genCode 0
    push 3
    genCode 2
    pop 5
    output 'slt $3, $5, $3'
    output 'sub $3, $11, $3'
    ;;
  "test expr GT expr")
    genCode 0
    push 3
    genCode 2
    pop 5
    output 'slt $3, $3, $5'
    ;;
  "expr term")
    genCode 0
    ;;
  "expr expr PLUS term")
    genCode 0
    push 3
    genCode 2
    pop 5
    ty1=$(cat 0/ty)
    ty2=$(cat 2/ty)
    if [ "$ty1" = "intp" ]; then
      output 'add $3, $3, $3'
      output 'add $3, $3, $3'
    elif [ "$ty2" = "intp" ]; then
      output 'add $5, $5, $5'
      output 'add $5, $5, $5'
    fi
    output 'add $3, $5, $3'
    ;;
  "expr expr MINUS term")
    genCode 0
    push 3
    genCode 2
    pop 5
    ty1=$(cat 0/ty)
    ty2=$(cat 2/ty)
    if [ "$ty1" = "intp" ]; then
      if [ "$ty2" = "intp" ]; then
        output 'sub $3, $5, $3'
        output 'div $3, $14'
        output 'mflo $3'
      else
        output 'add $3, $3, $3'
        output 'add $3, $3, $3'
        output 'sub $3, $5, $3'
      fi
    else
      output 'sub $3, $5, $3'
    fi
    ;;
  "term factor")
    genCode 0
    ;;
  "term term STAR factor")
    genCode 0
    push 3
    genCode 2
    pop 5
    output 'mult $5, $3'
    output 'mflo $3'
    ;;
  "term term SLASH factor")
    genCode 0
    push 3
    genCode 2
    pop 5
    output 'div $5, $3'
    output 'mflo $3'
    ;;
  "term term PCT factor")
    genCode 0
    push 3
    genCode 2
    pop 5
    output 'div $5, $3'
    output 'mfhi $3'
    ;;
  "factor ID")
    read -a array < 0/node
    name="${array[1]}"
    symTableLookup $name
    read -a array <<< $reslOffset
    reslOffset="${array[1]}"
    output "lw \$3, ${reslOffset}(\$29)"
    ;;
  "factor NUM")
    read -a array < 0/node
    num="${array[1]}"
    load-const 3 "$num"
    ;;
  "factor NULL")
    output 'add $3, $11, $0'
    ;;
  "factor LPAREN expr RPAREN")
    genCode 1
    ;;
  "factor AMP lvalue")
    genCode 1
    ;;
  "factor STAR factor")
    genCode 1
    output 'lw $3, 0($3)'
    ;;
  "factor NEW INT LBRACK expr RBRACK")
    genCode 3
    output 'add $1, $3, $0'
    output 'jalr $26'
    output 'bne $3, $0, 1'
    output 'add $3, $11, $0'
    ;;
  "factor ID LPAREN RPAREN")
    read -a array < 0/node
    name="PROC${array[1]}"
    output 'lis $31'
    output ".word $name"
    output 'jalr $31'
    ;;
  "factor ID LPAREN arglist RPAREN")
    read -a array < 0/node
    name="PROC${array[1]}"
    push 22
    output 'add $22, $30, $0'
    genCode 2
    output 'lis $31'
    output ".word $name"
    output 'jalr $31'
    output 'add $30, $22, $0'
    pop 22
    
    ;;
  "arglist expr")
    genCode 0
    push 3
    ;;
  "arglist expr COMMA arglist")
    genCode 0
    push 3
    genCode 2
    ;;
  "lvalue ID")
    read -a array < 0/node
    name="${array[1]}"
    symTableLookup $name
    read -a array <<< $reslOffset
    reslOffset="${array[1]}"
    load_const 3 "$reslOffset"
    output 'add $3, $3, $29'
    ;;
  "lvalue STAR factor")
    genCode 1
    ;;
  "lvalue LPAREN lvalue RPAREN")
    genCode 1
    ;;
  esac
  cd ..
}

if [ -e "$1" ]; then
  rm "$1"
fi

labelCnt=0
procTbl="$PWD/.procTable"
target="$PWD/$1"
touch $target
reslOffset=""
genCode tree
rm -r tree
